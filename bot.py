import os
from dotenv import load_dotenv
from telegram import (
    Update,
    WebAppInfo,
    InlineKeyboardMarkup, InlineKeyboardButton,
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, CallbackQueryHandler, filters
)

load_dotenv()

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))
QUESTIONS_THEME_ID = 2
SMS_THEME_ID = 5

message_map = {}  # message_id –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ -> user_id
user_state = {}  # user_id -> —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_state[update.message.from_user.id] = "main_menu"
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ ===
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "main_menu":
        user_state[query.from_user.id] = "main_menu"
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_keyboard()
        )
    elif query.data == "ask":
        user_state[query.from_user.id] = "awaiting_question"
        await query.edit_message_text(f"‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ü–æ —Å—Ä–æ—á–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º —Å–≤—è–∑—ã–≤–∞–π—Ç–µ—Å—å —Å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –ª–∞–≥–µ—Ä—è –∏–ª–∏ –≤–æ–∂–∞—Ç—ã–º–∏ –æ—Ç—Ä—è–¥–æ–≤ –Ω–∞–ø—Ä—è–º—É—é. <a href='https://drpolenovo.ru/informatsija-o-lagere/chasto-zadavaemye-voprosy.html'>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã.</a>", reply_markup=back_keyboard(), parse_mode="HTML")
    elif query.data == "sms":
        user_state[query.from_user.id] = "awaiting_sms"
        await query.edit_message_text("üéôÔ∏è–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–∏–≤–µ—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è —Ä–µ–±–µ–Ω–∫–∞, –ø—Ä–æ–≤–∏–Ω—Ü–∏—é, –Ω–∞–∑–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º.", reply_markup=back_keyboard())
    elif query.data == "merch":
        await query.message.reply_text("üëï –ù–∞—à –º–µ—Ä—á –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ: drpmerch.vercel.app")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
async def handle_user_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user = update.effective_user

    if user_state.get(user_id) == "awaiting_question":
        user_msg = update.message
        del user_state[user_id]  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        text = (
            f"üì© –í–æ–ø—Ä–æ—Å –æ—Ç {user.full_name} @{user.username}:\n"
            f"{update.message.text}"
        )

        admin_msg = await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=text,
            message_thread_id=QUESTIONS_THEME_ID
        )
        message_map[admin_msg.message_id] = (user.id, user_msg.message_id)

        await update.message.reply_text("‚úÖ –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
        await start(update, context)
    elif user_state.get(user_id) == "awaiting_sms":
        user_msg = update.message
        del user_state[user_id]  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        text = (
            f"üì© –°–ú–° –ø—Ä–∏–≤–µ—Ç –æ—Ç {user.full_name} @{user.username}:\n"
            f"{update.message.text}"
        )

        admin_msg = await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=text,
            message_thread_id=SMS_THEME_ID
        )
        #message_map[admin_msg.message_id] = (user.id, user_msg.message_id)

        await update.message.reply_text("‚úÖ –°–ú–° –ø—Ä–∏–Ω—è—Ç–∞. –í—Å–µ –ø—Ä–∏–≤–µ—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—É–¥—É—Ç –æ–∑–≤—É—á–µ–Ω—ã –≤ —ç—Ñ–∏—Ä–µ!")
        await start(update, context)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
        try:
            await update.message.delete()  # —É–¥–∞–ª—è–µ–º –ª—é–±–æ–µ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===
async def handle_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        return
    if update.message.message_thread_id != QUESTIONS_THEME_ID:
        await update.message.reply_text("‚ùå –û—Ç–≤–µ—Ç—ã –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç–µ–º–µ –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return

    replied_id = update.message.reply_to_message.message_id

    if replied_id is None:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")
        return

    try:
        user_id, user_msg_id = message_map.get(replied_id)
        await context.bot.send_message(chat_id=user_id, text=update.message.text, reply_to_message_id=user_msg_id)
        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

def main_menu_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üí¨ –°–ú–°–æ—á–∫–∏ –¥–ª—è –¥–µ—Ç–æ—á–∫–∏", callback_data="sms")
        ],
        [
            InlineKeyboardButton("üëï –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ—Ä—á",  web_app=WebAppInfo(url="https://drpmerch.vercel.app"))
        ],
        [
            InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask")
        ]
    ])

def back_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]])

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
def setup():
    telegram_app = Application.builder().token(BOT_TOKEN).build()
    telegram_app.add_handler(CommandHandler("start", start))
    telegram_app.add_handler(CallbackQueryHandler(handle_buttons))
    telegram_app.add_handler(MessageHandler(filters.ChatType.PRIVATE & filters.TEXT, handle_user_text))
    telegram_app.add_handler(MessageHandler(filters.Chat(ADMIN_CHAT_ID) & filters.REPLY & filters.TEXT, handle_reply))
    telegram_app.run_polling()

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    setup()