import os
import asyncio
from flask import Flask, request
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

# === Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Render ===
app = Flask(__name__)

# === Telegram Application ===
telegram_app = ApplicationBuilder().token(BOT_TOKEN).build()
message_map = {}  # message_id –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ -> user_id

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n/ask –≤–∞—à –≤–æ–ø—Ä–æ—Å")

# === –ö–æ–º–∞–Ω–¥–∞ /ask ===
async def ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not context.args:
        await update.message.reply_text("‚ùó –ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask.")
        return

    question = " ".join(context.args)
    text = f"üì© –í–æ–ø—Ä–æ—Å –æ—Ç @{user.username or '–±–µ–∑ –Ω–∏–∫–∞'} (ID: {user.id}):\n{question}"

    admin_msg = await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=text)
    message_map[admin_msg.message_id] = user.id

    await update.message.reply_text("‚úÖ –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú—ã —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===
async def handle_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.reply_to_message:
        return

    replied_id = update.message.reply_to_message.message_id
    user_id = message_map.get(replied_id)

    if user_id:
        try:
            await context.bot.send_message(chat_id=user_id, text=update.message.text)
            await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

# === Flask endpoint –¥–ª—è Telegram Webhook ===
@app.route("/webhook", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), telegram_app.bot)

    try:
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π event loop –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ —Ç–µ–∫—É—â–∏–º
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        loop.run_until_complete(telegram_app.process_update(update))
    finally:
        # –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º loop ‚Äî —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ "event loop is closed"
        # loop.close() ‚Äî –ù–ï –ù–ê–î–û!
        pass

    return "ok", 200

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
async def setup():
    telegram_app.add_handler(CommandHandler("start", start))
    telegram_app.add_handler(CommandHandler("ask", ask))
    telegram_app.add_handler(MessageHandler(filters.Chat(ADMIN_CHAT_ID) & filters.TEXT, handle_reply))

    await telegram_app.initialize()
    await telegram_app.bot.set_webhook(url=WEBHOOK_URL)
    print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", WEBHOOK_URL)

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    asyncio.run(setup())
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
